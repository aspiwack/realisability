#+TITLE: Krivine realisability from scratch
#+AUTHOR: Arnaud Spiwack


* TODO Abstract

* TODO Introduction

* TODO Realisability in a few words

* Simple types

** Simply typed λ-calculus

 Assume a set $I$ of individuals

 $$
 u,v ::= λx.u | u v | i ∈ I
 a,b ::= ι | a → b
 $$

 Typing rules
 $$
 Γ,x:a ⊢ u : b
 -------------
 Γ ⊢ λx. u : a → b

 Γ ⊢ u : a → b   Γ ⊢ v : a
 -------------------------
 Γ ⊢ u v : b

 ----------
 Γ ⊢ i : ι
 $$

** Operational semantics

Given by a Krivine machine

$$
π ::= ∙ | u ⋅ π
c ::= u ⋆ π
$$

$$
u v ⋆ π ~> u ⋆ v ⋅ π
λx. u ⋆ v ⋅ π ~> u[v] ⋆ π
$$

** Realisability model
Let $T$ be the set of closed terms, $Π$ the set of (closed) stacks and
$C$ the set of commands

Fix a pole $⊥ ∈ 𝒫(C)$, closed by anti-reduction. The model is
parametrised by this pole.

Define acceptors as sets of stacks and realisers as sets of terms
$$
|a → b| ∈ 𝒫(Π)
|a → b| ≜ ||a|| ⋅ |b|

|ι| ∈ 𝒫(Π)
|ι| ≜ I^⊥

||a|| ∈ 𝒫(C)
||a|| ≜ |a|^⊥
$$

*** TODO Define orthogonals

** Adequation

We will say that a sequent $x_1:a1,…,x_n:a_n ⊢ u : b$ is /adequat/ if

$$
∀ v_1∈||a_1||, …, v_n∈||a_n||. u[v_1,…,v_n] ∈ ||b||
$$

Our goal is to show that every derivable sequent is adequat. In
particular, for closed terms, that:
$$
⊢ u : b ⟹ u ∈ ||b||
$$

This is not a composable property. It can be, however, strengthened to
a property which we will be able to compose. Namely that all the
typing rules are adequat.

This can be phrased as /all typing rule preserve adequacy of
sequents/. In other words: if all premises are adequat then the
conclusion is adequat.

We need to prove
$$
(∀ v_1∈||a_1||, …, v_n∈||a_n||, v∈||a||. u[v,v_1,…,v_n] ∈ ||b||) ⟹ (∀ v_1∈||a_1||, …, v_n∈||a_n||. λx. u[v_1,…,v_n] ∈ ||a → b||)
(∀ v_1∈||a_1||, …, v_n∈||a_n||. u[v_1,…,v_n] ∈ ||a → b||) ∧ (∀ v_1∈||a_1||, …, v_n∈||a_n||. v ∈ ||a||) ⟹ (∀ v_1∈||a_1||, …, v_n∈||a_n||. (u v)[v_1,…,v_n] ∈ ||b||)
∀ v_1∈||a_1||, …, v_n∈||a_n||. i∈||ι||
$$

- Abstraction :: let $v_1∈||a_1||, …, v_n∈||a_n||$, we want to prove
                 that $λx. u ∈ ||a → b|| = (||a|| ⋅ |b|)^⊥$. That is,
                 that $∀ v_0 ∈ ||a||, π ∈ |b|, λx. u[v_1,…,v_n] ⋆ v_0 ⋅
                 π ∈ ⊥$.

                 By anti-reduction, it is sufficient to prove that
                 $u[v_0,v_1,…,v_n] ⋆ π ∈ ⊥$, which holds by
                 hypothesis.

- Application :: again, let $v_1∈||a_1||, …, v_n∈||a_n||$, we want to
                 prove that $(u v)[v_1,…,v_n] ∈ ||b|| = |b|^⊥$. That
                 is, that $forall π∈|b|, (u v)[v_1,…,v_n] ⋆ π ∈ ⊥$.

                 By anti-reduction, it is sufficient to prove that
                 $u[v_1,…,v_n] ⋆ v[v_1,…,v_n] ⋅ π ∈ ⊥$. By hypothesis,
                 $v[v_1,…,v_n] ∈ ||a||$, therefore $v[v_1,…,v_n] ⋅ π
                 ∈ ||a|| ⋅ |b| = |a → b|$. By hypothesis $u[v_1,…,v_n]
                 ∈ ||a → b||=|a → b|^⊥$, in particular, $u[v_1,…,v_n]
                 ⋆ π ∈ ⊥$ (qed).

- Individuals :: once more, let $v_1∈||a_1||, …, v_n∈||a_n||$, which
                 we can, this time, promptly ignore. We want to prove
                 that $i ∈ ||I|| = I^{⊥⊥}$. Which holds since, by
                 definition, $i ∈ I ⊆ I^{⊥⊥}$.

Remark: this latter property follows from the fact that $||I||$ is a
double-orthogonal. Other types whose set of realiser is a
double-orthogonal will enjoy similarly direct proofs for their
introduction rule.

** Proving properties

You may have noticed that we still have fixed the pole $⊥$. Adequacy
is true /for all poles/. Changing the pole, on the other hand, gives
rise to very different models.

We are therefore free to play with the choice of pole to prove things
about our type system.

*** Type safety of individuals

Let $⊥ = \{ u | ∃ i∈I. u⋆∙ ~>^* i⋆∙ \}$ the set of values which evaluate
to an individual. Then, by definition $∙ ∈ |I| = I^⊥$.

It follows that $⊢ u : ι ⟹ u∈||I||=|I|^⊥ ⟹ u⋆∙ ∈ ⊥$. In other words:
every closed term of type $ι$ reduces to an individual.

There is a lot to unfold here: in one swoop we've proved that (closed)
terms of type $ι$ do not block (a property known as /progress/),
reduce to a value of the desired form (type safety) and normalises.

In more standard proofs, each require their indivual induction. And
their own intermediate lemma. Normalisation is particularly
unforgiving.

In exchange, we have only proven these at a single type, and, more
importantly, we have weakened the notion of type safety, with respect
to the stronger /subject reduction/, which stipulates that every
reduction step preserves typing, in comparison we have proved that
reduction /eventually/ preserves realisers.

Remark that we cannot prove that $⊢ u : a → b$ reduces to
$λx. u'$. The proof above would work for any types whose set of
realiser is a double-orthogonal. But ||a→b|| is not a double
orthogonal. A way to see, why this cannot hold, is that our proof, so
far, would be left unaffected if we added function constants (for
instance, suppose $I=ℕ$ and extend the syntax with $⊢ + : ι→ι→ι$, and
the obvious reduction rule). These constants certainly do not reduce
to a $λ$-abstraction, so, indeed, it doesn't follow from $⊢ u : a→b$
that $u$ must reduce to such a $λ$-abstraction.

*** Normalisation

I don't believe that there is a direct equivalent normalisation for
functio types. Indeed, by definition $∙$ is not an acceptor of |a→b|,
so it doesn't quite make sense, in our model, to ask what $u⋆∙$
reduces to, when $u∈||a→b||$.

An equaly interesting property of functions is totality. Usually
defined along the following lines:
- $u$ is total at type $ι$ if it reduces to an individual $i$
- $u$ is total at type $a→b$ if for all term $v$ total at type $a$,
  $u v$ is total at type $b$

Obviously, it requires a bit massaging to fit in our model, where
reduction is defined in terms of stacks and commands. I'm afraid I
haven't completely defined the details out yet, but I believe that if
you take the pole $⊥ = \{ c | c terminates \} (which is clearly closed
by anti-reduction), then when $u⋆π ∈ ⊥$ then $u$ and all the elements
of $π$ are total. This may even be taken as a definition of total: $u$
is total at type $a$ if $u$ is a realiser of $a$ for this pole.

Let us keep in mind, however, that in addition to the slightly unusual
property, we are only concerned, in this realisability model with a
form of weak head reduction for a deterministic reduction
strategy. There are probably ways to extend the model to more complex
reduction strategies, this has not been worked out in the literature
yet, though.

* TODO Adding polymorphism: System F

System F is obtained by extending the syntax of types (and types alo)

* TODO Adding non-termination

* TODO Adding sum and products

* TODO Historical remarks

- Realisability in Kleene's sense
- The importance of orthogonality had been noticed by Girard. Was
  already latent in his reducibility candidate proof of strong
  normalisation of system F
- Krivine's flavour or realisability (including the notion of pole)
  was introduce to study classical logic and set theory under the gaze
  of Curry-Howard.

* TODO Further reading

- This is call-by-name
- Sequent calculus & polarisation: http://assert-false.net/arnaud/papers/A%20dissection%20of%20L.pdf
  - Also call-by-push-value [TODO]
- Kriving realisability and sequent calculus: http://guillaume.munch.name/files/focalisation_and_classical_realisability_long.pdf
- http://www.cs.yale.edu/homes/rieg-lionel/thesis/thesis-color.pdf
